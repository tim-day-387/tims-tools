#!/bin/bash
# SPDX-License-Identifier: GPL-3.0
#
# Copyright (c) 2023 - Timothy Day <tday141@gmail.com>
#
#  _____  _____ 
# |_   _||_   _|
#   | |    | |  
#   |_|    |_|  
#
# Tims Tools - Various helpful scripts and
# tools to make me more productive.
#

#
# Display a logo and some common system
# information.
#
fetch() {
    echo "+----------------+  [Tims Tools]"
    echo "|  _____  _____  |  [Kernel: $(uname -r)]"
    echo "| |_   _||_   _| |  [OS: $(lsb_release -d -s)]"
    echo "|   | |    | |   |  [Host: $(hostname)]"
    echo "|   |_|    |_|   |  [Arch: $(arch)]"
    echo "+----------------+  [CPUs: $(nproc)]"
}

#
# Download repos I use commonly, and put them
# in the Programming directory
#
setup_workspace() {
    mkdir -p ~/Programming
    cd ~/Programming


    # Personal repos
    git clone https://github.com/tim-day-387/tims-tools
    git clone https://github.com/tim-day-387/screen-custom


    # Useful tools
    git clone https://github.com/stacked-git/stgit


    # Projects
    git clone git://git.whamcloud.com/fs/lustre-release.git
    git clone https://github.com/openzfs/zfs.git
    git clone https://github.com/torvalds/linux.git
}

#
# Install useful packages and perform some
# minimal setup.
#
install_tools() {
    use_apt=false
    has_pkg_manager=false

    if which apt; then
	use_apt=true
	has_pkg_manager=true
	echo "Debian"
    fi
    if which dnf; then
	has_pkg_manager=true
	echo "RHEL"
    fi


    if [ "$has_pkg_manager" = false ]; then
	echo "No supported pkg manager!"
    fi


    # Install general tools
    if [ "$use_apt" = false ]; then
	sudo dnf update -y
	sudo dnf install -y emacs nano git python3
    fi
    if [ "$use_apt" = true ]; then
	sudo apt update -y
	sudo apt install -y emacs nano git python3
    fi

    # Configure git
    git config --global core.editor nano
    git config --global pull.rebase false

    # Install gh cli
    if [ "$use_apt" = false ]; then
	sudo dnf install -y 'dnf-command(config-manager)'
	sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
	sudo dnf install -y gh
    fi
    if [ "$use_apt" = true ]; then
	type -p curl >/dev/null || sudo apt install curl -y
	curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
	    && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
	    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
	    && sudo apt update \
	    && sudo apt install gh -y
    fi


    # Install lustre/kernel tools
    if [ "$use_apt" = false ]; then
	# General kernel tools
	sudo dnf install -y kernel kernel-devel openssl-devel binutils-devel lsof crash kexec-tools perf psmisc
	sudo dnf install -y wget ncurses-devel bc dwarves
	sudo dnf groupinstall -y 'Development Tools'
	sudo dnf config-manager --set-enabled powertools
	sudo dnf install -y libyaml-devel libnl3-devel libmount-devel
	sudo dnf install -y --enablerepo=*debug* kernel-debuginfo

	# Lustre ext2/3/4 tools
	sudo dnf config-manager --add-repo=https://downloads.whamcloud.com/public/e2fsprogs/latest/el8
	sudo dnf install -y --nogpgcheck e2fsprogs-devel

	# Clang/LLVM
	sudo dnf install -y clang llvm-toolset

	# ZFS
	sudo dnf -y install elfutils-libelf-devel libudev-devel libattr-devel libaio-devel libuuid-devel libblkid-devel libtirpc-devel
	sudo dnf -y install libffi-devel ncompress python3-cffi python3-devel python3-packaging
    fi

    if [ "$use_apt" = true ]; then
	# General kernel tools
	sudo apt install -y lsof crash kexec-tools psmisc
	sudo apt install -y wget bc dwarves
	sudo apt install -y linux-image-$(uname -r)
	sudo apt install -y libtool libtool-bin libyaml-dev ed libreadline-dev dpatch libsnmp-dev mpi-default-dev module-assistant quilt
	sudo apt install -y libncurses5-dev libncurses-dev bison flex gnupg libelf-dev gcc libssl-dev bc bzip2 build-essential udev kmod cpio
	sudo apt install -y libfuse-dev libattr1-dev libblkid-dev uuid-dev devscripts fakeroot kernel-wedge libudev-dev libpython3-dev swig
	sudo apt install -y gettext texinfo debhelper dh-exec apt-config-auto-update sg3-utils attr mpi-default-bin selinux-utils
	sudo apt install -y libkeyutils-dev libmount-dev libmount1 libnl-genl-3-dev pkg-config

	# ZFS
	sudo apt install -y alien
	sudo apt install -y python3-cffi python3-dev python3-packaging python3-venv python3-pip
    fi
}

#
# Update tims-tools
#
tims-tools-update() {
    curl -sSf https://raw.githubusercontent.com/tim-day-387/tims-tools/main/general/tims-tools > ~/.tt_profile
}

#
# Interactive version of tims-tools
#
main() {
    PS3="Select a command: "
    select opt in fetch setup install quit; do
	case $opt in
	    fetch)
		fetch
		;;
	    setup)
		setup_workspace
		;;
	    install)
		install_tools
		;;
	    quit)
		break
		;;
	    *)
		echo "Invalid option $REPLY"
		;;
	esac
    done
}

# Only run the interactive mode if TT_INTER is defined
if ! [[ -z ${TT_INTER+x} ]]; then
    main
    exit
fi

# Display login message
fetch

# Custom prompt
PS1="[\u][\h][\w]\$ "

# Custom aliases
alias emacs="emacs -nw"
